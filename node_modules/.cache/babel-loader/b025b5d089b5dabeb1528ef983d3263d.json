{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { apiActions } from \"./reducer\";\nimport { getApiResult } from \"../services/api-sause\";\nexport function* getApiAllData() {\n  try {\n    const response = yield call(getApiResult);\n    yield put(apiActions.Creators.apiSuccess(response));\n  } catch (error) {\n    yield put(apiActions.Creators.apiFailure(error));\n  }\n}\nexport function* watchGetAllApi() {\n  yield takeEvery(apiActions.Types.GET_API_DATA, getApiAllData);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchGetAllApi)]);\n}","map":{"version":3,"sources":["/Users/arit-macmini/Documents/LavinaVyas/Archive/src/redux/api/saga.js"],"names":["all","call","fork","put","takeEvery","apiActions","getApiResult","getApiAllData","response","Creators","apiSuccess","error","apiFailure","watchGetAllApi","Types","GET_API_DATA","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAAUC,YAAV,QAA6B,uBAA7B;AAEA,OAAO,UAAUC,aAAV,GAA0B;AAC/B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMP,IAAI,CAACK,YAAD,CAA3B;AACA,UAAMH,GAAG,CAACE,UAAU,CAACI,QAAX,CAAoBC,UAApB,CAA+BF,QAA/B,CAAD,CAAT;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACd,UAAMR,GAAG,CAACE,UAAU,CAACI,QAAX,CAAoBG,UAApB,CAA+BD,KAA/B,CAAD,CAAT;AACD;AACF;AAED,OAAO,UAAUE,cAAV,GAA2B;AAChC,QAAMT,SAAS,CAACC,UAAU,CAACS,KAAX,CAAiBC,YAAlB,EAAgCR,aAAhC,CAAf;AACD;AAED,eAAe,UAAUS,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CAACE,IAAI,CAACW,cAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { apiActions } from \"./reducer\";\nimport {  getApiResult} from \"../services/api-sause\";\n\nexport function* getApiAllData() {\n  try {\n    const response = yield call(getApiResult);\n    yield put(apiActions.Creators.apiSuccess(response));\n  } catch (error) {\n    yield put(apiActions.Creators.apiFailure(error));\n  }\n}\n\nexport function* watchGetAllApi() {\n  yield takeEvery(apiActions.Types.GET_API_DATA, getApiAllData);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchGetAllApi)]);\n}\n"]},"metadata":{},"sourceType":"module"}